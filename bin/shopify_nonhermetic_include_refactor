#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative 'include/shopify_refactor'

class TestFile
  MODULE_INCLUDE_REGEX = /include[ (]NonhermeticTestHelper/
  MODULE_ERRORS = {
    "Resiliency::TestHelper" => [
      "assert_resiliency_fallback",
      "skip_resiliency_verifiers_for",
      "allowlist_jobs_redis_from_resiliency_verifier",
      "assert_redis_with_fallback",
      "toxiproxy_from_redis",
      "toxiproxy_redis_down",
      "toxiproxy_elasticsearch_down",
      "toxiproxy_mysql_down",
      "toxiproxy_memcache_down",
    ],
    "AuditEventTestHelper" => [
      "assert_audit_log",
      "enable_audit_events",
    ],
    "GatewayTesting" => [
      "mock_paypal_express",
      "stub_paypal_express_connection_error",
      "mock_payflow_express",
      "mock_paypal_in_context_paypal_express",
      "add_paypal_express",
      "add_manual_gateway",
      "add_shopify_payments",
      "add_gateway",
      "add_existing_gateway",
      "process_options",
      "add_gateway_to_shop",
      "add_sofort",
      "preload_shop_sharded_associations",
    ],
    "Merchandising::ProductTestHelper" => [
      "valid_product_attributes",
      "valid_variant_attributes",
      "create_products_with_id",
    ],
    "FeatureSetMockTestHelper" => [
      "stub_beta_flags",
      "mock_feature_set",
    ],
    "AsyncCacheTestHelper" => [
      "haven't been flushed",
      "have been flushed",
      "cache was not flushed but was expected to be",
      "cache was flushed but was not expected to be",
    ],
    "BackgroundQueue::HedwigJobBehaviourFaker" => [
      "DEPRECATION WARNING: Pipelining commands on a Redis",
    ],
    "CreditCardHelper" => [
      "credit_card_hash",
      "vault_credit_card_hash",
      "credit_card",
      "checkout_credit_card",
      "valid_visa_hash",
      "valid_vault_visa_hash",
      "valid_shopify_pay_vault_bogus_hash",
      "valid_bogus_hash",
      "valid_vault_bogus_hash",
      "invalid_credit_card_hash",
      "invalid_vault_credit_card_hash",
      "new_valid_visa",
      "new_valid_bogus",
      "new_valid_checkout_bogus",
      "valid_billing_address_hash",
    ],
    "IdentityCacheTestHelper" => [
      "miss_then_hit_with_model_and_id",
      "miss_then_hit_with_model_and_method_and_args",
    ],
    "CountryPricingTestHelper" => [
      "presentment_currency",
      "MoneyBag",
      "money_bag",
    ],
  }
  GRIND_MODULES = [
    "BackgroundQueue::HedwigJobBehaviourFaker",
    "Resiliency::TestHelper",
    "AsyncCacheTestHelper",
    "IdentityCacheTestHelper",
    "MailerTestHelper",
    "ActiveJob::TestHelper",
    "GatewayTesting",
    "CreditCardHelper",
    "Merchandising::ProductTestHelper",
    "PreserveEnvTestHelper",
    "AuditEventTestHelper",
    "TestData::CartFixtures",
    "CountryPricingTestHelper",
  ]

  attr_reader :message, :filename

  def initialize(filename)
    @filename = filename
    @macros = {
      active_record_fixtures: false,
      feature_rollout_cache: false,
      feature_set_cache: false, # this isn't really used yet
      memcached: false,
      redis: false,
      country_rate_cache: false,
    }
    @modules = []
    @grind_module = nil
    @success = false
    @message = nil
    @original = nil
    @lines = nil
    @line = nil
    @line_number = nil
    @indent = nil
    @revert_file = true
  end

  def fix
    begin
      # Load the test file
      raise Failure, "does not exist" unless File.exist?(filename)
      @original = File.read(filename)
      @lines = File.readlines(filename)

      # Make sure the file has a target for refactor
      match_count = @original.scan(MODULE_INCLUDE_REGEX).size
      raise Failure, "file does not include NonhermeticTestHelper" if match_count == 0
      raise Failure, "file has more than one include of NonhermeticTestHelper" if match_count > 1

      # Extract the line we care about
      @lines.each_with_index do |l, index|
        if l.match?(MODULE_INCLUDE_REGEX)
          @line_number = index
          break
        end
      end
      raise Failure, "for some reason could not find the line" unless @line_number
      @line = @lines[@line_number]

      # Figure out how much to indent the macros
      begin
        @indent = @line.match(/\A(\ *)[a-zA-Z]/)[1].length
      rescue => e
        raise Failure, "could not parse indent #{ e.inspect }"
      end

      # Check the test actually runs and passes
      output, success = run_test
      raise Failure, "test failed first run without modification" unless success

      # Try just switching without any macros
      rewrite_line
      output, success = run_test
      grind_module_index = nil

      # Then grind out the macros
      if !success
        loop do
          change = false
          @grind_module = nil

          if output.match(/ use_redis /) && !@macros[:redis]
            @macros[:redis] = true
            change = true
          end
          if output.match(/ use_memcached /) && !@macros[:memcached]
            @macros[:memcached] = true
            change = true
          end
          if output.match(/ use_feature_rollout_cache /) && !@macros[:feature_rollout_cache]
            @macros[:feature_rollout_cache] = true
            change = true
          end
          if output.match(/ use_feature_set_cache /) && !@macros[:feature_set_cache]
            @macros[:feature_set_cache] = true
            change = true
          end
          if output.match(/ use_country_rate_cache /) && !@macros[:country_rate_cache]
            @macros[:country_rate_cache] = true
            change = true
          end
          if !change && !@macros[:active_record_fixtures]
            @macros[:active_record_fixtures] = true
            change = true
          end
          MODULE_ERRORS.each do |module_name, errors|
            if !@modules.include?(module_name) && errors.any? { |e| output.match(e) }
              @modules << module_name
              change = true
            end
          end
          if !change
            if grind_module_index == nil
              grind_module_index = 0
            else
              grind_module_index += 1
            end

            # Speed improvement: could check @modules.include?(GRIND_MODULES[grind_module_index]) and skip it
            @grind_module = GRIND_MODULES[grind_module_index]
            change = true if @grind_module
          end
          if !change
            raise Failure, "cannot figure out how to update test #{ @macros.inspect } #{ @modules.inspect }"
          end

          rewrite_line
          output, success = run_test

          break if success
        end
      end

      @success = true
    rescue Failure => e
      revert_file if @revert_file
      @success = false
      @message = e.message
    ensure
      revert_file if !@success && @revert_file
    end
  end

  def success?
    !!@success
  end

  private

  def run_test
    command = "bin/test #{ filename }"
    stdout, stderr, status = Open3.capture3(command)
    [stdout, status.success?]
  end

  def rewrite_line
    modules = (@modules + [ @grind_module ]).compact.uniq.sort
    macros = @macros.map { |macro, val| "use_#{ macro }" if val }.compact

    replacement = if modules.blank? && macros.blank?
      nil
    else
      macros_block = macros.map { |m| "#{ ' ' * @indent }#{ m }" }.join("\n")
      modules_block = modules.map { |m| "#{ ' ' * @indent }include #{ m }" }.join("\n")

      str = [macros_block, modules_block].reject(&:blank?).join("\n\n")

      have_a_blank_line = line_at(+1).blank?
      want_a_blank_line = !(modules.any? && line_at(+1).match?(/\A\s*include/))

      if want_a_blank_line && !have_a_blank_line
        str = "#{ str }\n\n"
      elsif want_a_blank_line && have_a_blank_line
        str = "#{ str }\n"
      elsif !want_a_blank_line && have_a_blank_line
        # use the existing blank line
      else # !want_a_blank_line && !have_a_blank_line
        str = "#{ str }\n"
      end

      str
    end

    @lines[@line_number] = replacement
    write_file
  end

  def line_at(offset) = @lines[@line_number + offset]

  def write_file
    File.open(@filename, "w") { |f| f.write(@lines.reject(&:nil?).join("")) }
  end

  def revert_file
    File.open(@filename, "w") { |f| f.write(@original) } if @original.present?
  end
end

RubocopRefactorRunner.new(:nonhermetic_include_refactor, cop: "Cops/TestCaseIncludesNonhermeticTestHelper").run do |filename, line_number|
  file = TestFile.new(filename)

  print "#{ filename } "
  file.fix

  if file.success?
    puts Rainbow("success").green
    logger.info("#{ filename } success")
  else
    puts Rainbow(file.message.presence || "failure").red
    logger.error("#{ filename } #{ file.message }")
  end

  file.success?
end
